{"version":3,"file":"static/js/325.11c600ae.chunk.js","mappings":"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","sources":["components/Orders.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport '../styles/Orders.css';\r\nimport database from '../utils/database';\r\n\r\n\r\nexport default function Orders({ user, orders = [], darkMode = false }) {\r\n  const [loading, setLoading] = useState(true);\r\n  const [showTracking, setShowTracking] = useState(false);\r\n  const [selectedOrder, setSelectedOrder] = useState(null);\r\n  const [userOrders, setUserOrders] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      // Get user orders from database\r\n      const orders = database.getUserOrders(user.id);\r\n      setUserOrders(orders);\r\n    }\r\n    setLoading(false);\r\n  }, [user]);\r\n\r\n  const getStatusColor = (status) => {\r\n    switch (status) {\r\n      case 'Delivered':\r\n        return '#4CAF50';\r\n      case 'Shipped':\r\n        return '#2196F3';\r\n      case 'Processing':\r\n        return '#FF9800';\r\n      case 'Preparing':\r\n        return '#9C27B0';\r\n      default:\r\n        return '#666';\r\n    }\r\n  };\r\n\r\n  const formatDate = (dateString) => {\r\n    return new Date(dateString).toLocaleDateString('en-US', {\r\n      year: 'numeric',\r\n      month: 'long',\r\n      day: 'numeric'\r\n    });\r\n  };\r\n\r\n  const handleTrackOrder = (order) => {\r\n    setSelectedOrder(order);\r\n    setShowTracking(true);\r\n  };\r\n\r\n  const closeTracking = () => {\r\n    setShowTracking(false);\r\n    setSelectedOrder(null);\r\n  };\r\n\r\n  const getTrackingSteps = (status) => {\r\n    const steps = [\r\n      { id: 1, title: 'Order Placed', description: 'Your order has been received', completed: true },\r\n      { id: 2, title: 'Processing', description: 'We are preparing your order', completed: status === 'Processing' || status === 'Preparing' || status === 'Shipped' || status === 'Delivered' },\r\n      { id: 3, title: 'Preparing', description: 'Your items are being prepared', completed: status === 'Preparing' || status === 'Shipped' || status === 'Delivered' },\r\n      { id: 4, title: 'Shipped', description: 'Your order is on its way', completed: status === 'Shipped' || status === 'Delivered' },\r\n      { id: 5, title: 'Delivered', description: 'Your order has been delivered', completed: status === 'Delivered' }\r\n    ];\r\n    return steps;\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"orders-container\">\r\n        <div className=\"loading\">\r\n          <div className=\"spinner\"></div>\r\n          <p>Loading your orders...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={`orders-container ${darkMode ? 'dark-mode' : ''}`}>\r\n      <div className=\"orders-header\">\r\n        <h1>My Orders</h1>\r\n        <p>Welcome back, {user?.name || 'User'}!</p>\r\n      </div>\r\n\r\n      {userOrders.length === 0 ? (\r\n        <div className=\"no-orders\">\r\n          <div className=\"no-orders-icon\">ðŸ“¦</div>\r\n          <h3>No Orders Yet</h3>\r\n          <p>You haven't placed any orders yet. Start shopping to see your orders here!</p>\r\n          <Link to=\"/\" className=\"start-shopping-btn\">Start Shopping</Link>\r\n        </div>\r\n      ) : (\r\n        <div className=\"orders-list\">\r\n          {userOrders.map((order) => (\r\n            <div key={order.id} className=\"order-card\">\r\n              <div className=\"order-header\">\r\n                <div className=\"order-info\">\r\n                  <h3>Order #{order.orderNumber}</h3>\r\n                  <p className=\"order-date\">{formatDate(order.date)}</p>\r\n                </div>\r\n                <div className=\"order-status\">\r\n                  <span \r\n                    className=\"status-badge\"\r\n                    style={{ backgroundColor: getStatusColor(order.status) }}\r\n                  >\r\n                    {order.status}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"order-items\">\r\n                {order.items.map((item, index) => (\r\n                  <div key={index} className=\"order-item\">\r\n                    <div className=\"item-image\">\r\n                      <img src={item.image} alt={item.name} />\r\n                    </div>\r\n                    <div className=\"item-details\">\r\n                      <h4>{item.name}</h4>\r\n                      <p className=\"item-price\">${item.price}</p>\r\n                      <p className=\"item-quantity\">Quantity: {item.quantity}</p>\r\n                      <p className=\"item-total\">Total: ${(item.price * item.quantity).toFixed(2)}</p>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n\r\n              <div className=\"order-footer\">\r\n                <div className=\"order-total\">\r\n                  <span>Total:</span>\r\n                  <strong>${order.total.toFixed(2)}</strong>\r\n                </div>\r\n                <button \r\n                  className=\"track-order-btn\"\r\n                  onClick={() => handleTrackOrder(order)}\r\n                >\r\n                  Track Order\r\n                </button>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n\r\n      {/* Tracking Modal */}\r\n      {showTracking && selectedOrder && (\r\n        <div className=\"tracking-modal-overlay\" onClick={closeTracking}>\r\n          <div className=\"tracking-modal\" onClick={(e) => e.stopPropagation()}>\r\n            <div className=\"tracking-header\">\r\n              <h2>Track Order #{selectedOrder.orderNumber}</h2>\r\n              <button className=\"close-tracking-btn\" onClick={closeTracking}>Ã—</button>\r\n            </div>\r\n            \r\n            <div className=\"tracking-steps\">\r\n              {getTrackingSteps(selectedOrder.status).map((step, index) => (\r\n                <div key={step.id} className={`tracking-step ${step.completed ? 'completed' : ''}`}>\r\n                  <div className=\"step-number\">{step.completed ? 'âœ“' : step.id}</div>\r\n                  <div className=\"step-content\">\r\n                    <h4>{step.title}</h4>\r\n                    <p>{step.description}</p>\r\n                  </div>\r\n                  {index < getTrackingSteps(selectedOrder.status).length - 1 && (\r\n                    <div className={`step-connector ${step.completed ? 'completed' : ''}`}></div>\r\n                  )}\r\n                </div>\r\n              ))}\r\n            </div>\r\n\r\n            <div className=\"tracking-footer\">\r\n              <p>Estimated delivery: {formatDate(new Date(Date.now() + 7 * 24 * 60 * 60 * 1000))}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n      \r\n      \r\n    </div>\r\n  );\r\n} "],"names":["Orders","_ref","user","orders","darkMode","loading","setLoading","useState","showTracking","setShowTracking","selectedOrder","setSelectedOrder","userOrders","setUserOrders","useEffect","database","getUserOrders","id","getStatusColor","status","formatDate","dateString","Date","toLocaleDateString","year","month","day","closeTracking","getTrackingSteps","title","description","completed","_jsx","className","children","_jsxs","name","length","Link","to","map","order","orderNumber","date","style","backgroundColor","items","item","index","src","image","alt","price","quantity","toFixed","total","onClick","handleTrackOrder","e","stopPropagation","step","now"],"sourceRoot":""}