{"version":3,"file":"static/js/464.3ced87a0.chunk.js","mappings":"oLAMe,SAASA,EAAMC,GAA2C,IAA1C,KAAEC,EAAI,OAAEC,EAAS,GAAE,SAAEC,GAAW,GAAOH,EACpE,MAAOI,EAASC,IAAcC,EAAAA,EAAAA,WAAS,IAChCC,EAAcC,IAAmBF,EAAAA,EAAAA,WAAS,IAC1CG,EAAeC,IAAoBJ,EAAAA,EAAAA,UAAS,OAC5CK,EAAYC,IAAiBN,EAAAA,EAAAA,UAAS,KAE7CO,EAAAA,EAAAA,WAAU,KACR,GAAIZ,EAAM,CAER,MAAMC,EAASY,EAAAA,EAASC,cAAcd,EAAKe,IAC3CJ,EAAcV,EAChB,CACAG,GAAW,IACV,CAACJ,IAEJ,MAAMgB,EAAkBC,IACtB,OAAQA,GACN,IAAK,YACH,MAAO,UACT,IAAK,UACH,MAAO,UACT,IAAK,aACH,MAAO,UACT,IAAK,YACH,MAAO,UACT,QACE,MAAO,SAIPC,EAAcC,GACX,IAAIC,KAAKD,GAAYE,mBAAmB,QAAS,CACtDC,KAAM,UACNC,MAAO,OACPC,IAAK,YASHC,EAAgBA,KACpBlB,GAAgB,GAChBE,EAAiB,OAGbiB,EAAoBT,GACV,CACZ,CAAEF,GAAI,EAAGY,MAAO,eAAgBC,YAAa,+BAAgCC,WAAW,GACxF,CAAEd,GAAI,EAAGY,MAAO,aAAcC,YAAa,8BAA+BC,UAAsB,eAAXZ,GAAsC,cAAXA,GAAqC,YAAXA,GAAmC,cAAXA,GAClK,CAAEF,GAAI,EAAGY,MAAO,YAAaC,YAAa,gCAAiCC,UAAsB,cAAXZ,GAAqC,YAAXA,GAAmC,cAAXA,GACxI,CAAEF,GAAI,EAAGY,MAAO,UAAWC,YAAa,2BAA4BC,UAAsB,YAAXZ,GAAmC,cAAXA,GACvG,CAAEF,GAAI,EAAGY,MAAO,YAAaC,YAAa,gCAAiCC,UAAsB,cAAXZ,IAK1F,OAAId,GAEA2B,EAAAA,EAAAA,KAAA,OAAKC,UAAU,mBAAkBC,UAC/BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,UAASC,SAAA,EACtBF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,aACfD,EAAAA,EAAAA,KAAA,KAAAE,SAAG,iCAOTC,EAAAA,EAAAA,MAAA,OAAKF,UAAS,oBAAAG,OAAsBhC,EAAW,YAAc,IAAK8B,SAAA,EAChEC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,gBAAeC,SAAA,EAC5BF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,eACJC,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAG,kBAAmB,OAAJhC,QAAI,IAAJA,OAAI,EAAJA,EAAMmC,OAAQ,OAAO,UAGlB,IAAtBzB,EAAW0B,QACVH,EAAAA,EAAAA,MAAA,OAAKF,UAAU,YAAWC,SAAA,EACxBF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,iBAAgBC,SAAC,kBAChCF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,mBACJF,EAAAA,EAAAA,KAAA,KAAAE,SAAG,gFACHF,EAAAA,EAAAA,KAACO,EAAAA,GAAI,CAACC,GAAG,IAAIP,UAAU,qBAAoBC,SAAC,uBAG9CF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,cAAaC,SACzBtB,EAAW6B,IAAKC,IACfP,EAAAA,EAAAA,MAAA,OAAoBF,UAAU,aAAYC,SAAA,EACxCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAC3BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYC,SAAA,EACzBC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,CAAI,UAAQQ,EAAMC,gBAClBX,EAAAA,EAAAA,KAAA,KAAGC,UAAU,aAAYC,SAAEd,EAAWsB,EAAME,YAE9CZ,EAAAA,EAAAA,KAAA,OAAKC,UAAU,eAAcC,UAC3BF,EAAAA,EAAAA,KAAA,QACEC,UAAU,eACVY,MAAO,CAAEC,gBAAiB5B,EAAewB,EAAMvB,SAAUe,SAExDQ,EAAMvB,eAKba,EAAAA,EAAAA,KAAA,OAAKC,UAAU,cAAaC,SACzBQ,EAAMK,MAAMN,IAAI,CAACO,EAAMC,KACtBd,EAAAA,EAAAA,MAAA,OAAiBF,UAAU,aAAYC,SAAA,EACrCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,aAAYC,UACzBF,EAAAA,EAAAA,KAAA,OAAKkB,IAAKF,EAAKG,MAAOC,IAAKJ,EAAKX,UAElCF,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,MAAAE,SAAKc,EAAKX,QACVF,EAAAA,EAAAA,MAAA,KAAGF,UAAU,aAAYC,SAAA,CAAC,IAAEc,EAAKK,UACjClB,EAAAA,EAAAA,MAAA,KAAGF,UAAU,gBAAeC,SAAA,CAAC,aAAWc,EAAKM,aAC7CnB,EAAAA,EAAAA,MAAA,KAAGF,UAAU,aAAYC,SAAA,CAAC,YAAUc,EAAKK,MAAQL,EAAKM,UAAUC,QAAQ,WARlEN,OAcdd,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAC3BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,cAAaC,SAAA,EAC1BF,EAAAA,EAAAA,KAAA,QAAAE,SAAM,YACNC,EAAAA,EAAAA,MAAA,UAAAD,SAAA,CAAQ,IAAEQ,EAAMc,MAAMD,QAAQ,UAEhCvB,EAAAA,EAAAA,KAAA,UACEC,UAAU,kBACVwB,QAASA,IAxFCf,KACxB/B,EAAiB+B,GACjBjC,GAAgB,IAsFaiD,CAAiBhB,GAAOR,SACxC,qBAxCKQ,EAAMzB,OAkDrBT,GAAgBE,IACfsB,EAAAA,EAAAA,KAAA,OAAKC,UAAU,yBAAyBwB,QAAS9B,EAAcO,UAC7DC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iBAAiBwB,QAAUE,GAAMA,EAAEC,kBAAkB1B,SAAA,EAClEC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,kBAAiBC,SAAA,EAC9BC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,CAAI,gBAAcxB,EAAciC,gBAChCX,EAAAA,EAAAA,KAAA,UAAQC,UAAU,qBAAqBwB,QAAS9B,EAAcO,SAAC,aAGjEF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,iBAAgBC,SAC5BN,EAAiBlB,EAAcS,QAAQsB,IAAI,CAACoB,EAAMZ,KACjDd,EAAAA,EAAAA,MAAA,OAAmBF,UAAS,iBAAAG,OAAmByB,EAAK9B,UAAY,YAAc,IAAKG,SAAA,EACjFF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,cAAaC,SAAE2B,EAAK9B,UAAY,SAAM8B,EAAK5C,MAC1DkB,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,MAAAE,SAAK2B,EAAKhC,SACVG,EAAAA,EAAAA,KAAA,KAAAE,SAAI2B,EAAK/B,iBAEVmB,EAAQrB,EAAiBlB,EAAcS,QAAQmB,OAAS,IACvDN,EAAAA,EAAAA,KAAA,OAAKC,UAAS,kBAAAG,OAAoByB,EAAK9B,UAAY,YAAc,QAP3D8B,EAAK5C,QAanBe,EAAAA,EAAAA,KAAA,OAAKC,UAAU,kBAAiBC,UAC9BC,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAG,uBAAqBd,EAAW,IAAIE,KAAKA,KAAKwC,MAAQ,qBASvE,C","sources":["components/Orders.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport '../styles/Orders.css';\nimport database from '../utils/database';\n\n\nexport default function Orders({ user, orders = [], darkMode = false }) {\n  const [loading, setLoading] = useState(true);\n  const [showTracking, setShowTracking] = useState(false);\n  const [selectedOrder, setSelectedOrder] = useState(null);\n  const [userOrders, setUserOrders] = useState([]);\n\n  useEffect(() => {\n    if (user) {\n      // Get user orders from database\n      const orders = database.getUserOrders(user.id);\n      setUserOrders(orders);\n    }\n    setLoading(false);\n  }, [user]);\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'Delivered':\n        return '#4CAF50';\n      case 'Shipped':\n        return '#2196F3';\n      case 'Processing':\n        return '#FF9800';\n      case 'Preparing':\n        return '#9C27B0';\n      default:\n        return '#666';\n    }\n  };\n\n  const formatDate = (dateString) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n  };\n\n  const handleTrackOrder = (order) => {\n    setSelectedOrder(order);\n    setShowTracking(true);\n  };\n\n  const closeTracking = () => {\n    setShowTracking(false);\n    setSelectedOrder(null);\n  };\n\n  const getTrackingSteps = (status) => {\n    const steps = [\n      { id: 1, title: 'Order Placed', description: 'Your order has been received', completed: true },\n      { id: 2, title: 'Processing', description: 'We are preparing your order', completed: status === 'Processing' || status === 'Preparing' || status === 'Shipped' || status === 'Delivered' },\n      { id: 3, title: 'Preparing', description: 'Your items are being prepared', completed: status === 'Preparing' || status === 'Shipped' || status === 'Delivered' },\n      { id: 4, title: 'Shipped', description: 'Your order is on its way', completed: status === 'Shipped' || status === 'Delivered' },\n      { id: 5, title: 'Delivered', description: 'Your order has been delivered', completed: status === 'Delivered' }\n    ];\n    return steps;\n  };\n\n  if (loading) {\n    return (\n      <div className=\"orders-container\">\n        <div className=\"loading\">\n          <div className=\"spinner\"></div>\n          <p>Loading your orders...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`orders-container ${darkMode ? 'dark-mode' : ''}`}>\n      <div className=\"orders-header\">\n        <h1>My Orders</h1>\n        <p>Welcome back, {user?.name || 'User'}!</p>\n      </div>\n\n      {userOrders.length === 0 ? (\n        <div className=\"no-orders\">\n          <div className=\"no-orders-icon\">ðŸ“¦</div>\n          <h3>No Orders Yet</h3>\n          <p>You haven't placed any orders yet. Start shopping to see your orders here!</p>\n          <Link to=\"/\" className=\"start-shopping-btn\">Start Shopping</Link>\n        </div>\n      ) : (\n        <div className=\"orders-list\">\n          {userOrders.map((order) => (\n            <div key={order.id} className=\"order-card\">\n              <div className=\"order-header\">\n                <div className=\"order-info\">\n                  <h3>Order #{order.orderNumber}</h3>\n                  <p className=\"order-date\">{formatDate(order.date)}</p>\n                </div>\n                <div className=\"order-status\">\n                  <span \n                    className=\"status-badge\"\n                    style={{ backgroundColor: getStatusColor(order.status) }}\n                  >\n                    {order.status}\n                  </span>\n                </div>\n              </div>\n\n              <div className=\"order-items\">\n                {order.items.map((item, index) => (\n                  <div key={index} className=\"order-item\">\n                    <div className=\"item-image\">\n                      <img src={item.image} alt={item.name} />\n                    </div>\n                    <div className=\"item-details\">\n                      <h4>{item.name}</h4>\n                      <p className=\"item-price\">${item.price}</p>\n                      <p className=\"item-quantity\">Quantity: {item.quantity}</p>\n                      <p className=\"item-total\">Total: ${(item.price * item.quantity).toFixed(2)}</p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n\n              <div className=\"order-footer\">\n                <div className=\"order-total\">\n                  <span>Total:</span>\n                  <strong>${order.total.toFixed(2)}</strong>\n                </div>\n                <button \n                  className=\"track-order-btn\"\n                  onClick={() => handleTrackOrder(order)}\n                >\n                  Track Order\n                </button>\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n\n      {/* Tracking Modal */}\n      {showTracking && selectedOrder && (\n        <div className=\"tracking-modal-overlay\" onClick={closeTracking}>\n          <div className=\"tracking-modal\" onClick={(e) => e.stopPropagation()}>\n            <div className=\"tracking-header\">\n              <h2>Track Order #{selectedOrder.orderNumber}</h2>\n              <button className=\"close-tracking-btn\" onClick={closeTracking}>Ã—</button>\n            </div>\n            \n            <div className=\"tracking-steps\">\n              {getTrackingSteps(selectedOrder.status).map((step, index) => (\n                <div key={step.id} className={`tracking-step ${step.completed ? 'completed' : ''}`}>\n                  <div className=\"step-number\">{step.completed ? 'âœ“' : step.id}</div>\n                  <div className=\"step-content\">\n                    <h4>{step.title}</h4>\n                    <p>{step.description}</p>\n                  </div>\n                  {index < getTrackingSteps(selectedOrder.status).length - 1 && (\n                    <div className={`step-connector ${step.completed ? 'completed' : ''}`}></div>\n                  )}\n                </div>\n              ))}\n            </div>\n\n            <div className=\"tracking-footer\">\n              <p>Estimated delivery: {formatDate(new Date(Date.now() + 7 * 24 * 60 * 60 * 1000))}</p>\n            </div>\n          </div>\n        </div>\n      )}\n      \n      \n    </div>\n  );\n} "],"names":["Orders","_ref","user","orders","darkMode","loading","setLoading","useState","showTracking","setShowTracking","selectedOrder","setSelectedOrder","userOrders","setUserOrders","useEffect","database","getUserOrders","id","getStatusColor","status","formatDate","dateString","Date","toLocaleDateString","year","month","day","closeTracking","getTrackingSteps","title","description","completed","_jsx","className","children","_jsxs","concat","name","length","Link","to","map","order","orderNumber","date","style","backgroundColor","items","item","index","src","image","alt","price","quantity","toFixed","total","onClick","handleTrackOrder","e","stopPropagation","step","now"],"sourceRoot":""}